generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shop {
  id              Int      @id @default(autoincrement())
  abn             String   @unique
  code            String   @unique
  name            String
  phone           String
  logo            String
  address1        String   @default("")
  address2        String   @default("")
  suburb          String   @default("")
  state           String   @default("")
  postcode        String   @default("")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  creditRate      Float    @default(1.5)
  cashPointRate   Float    @default(1)
  creditPointRate Float    @default(1)
  apiKey          String   @default("")
  customerKey     String   @default("")
  holidayCharge   Float    @default(10)
}

model Printer {
  id        Int     @id @default(autoincrement())
  label     String
  ip        String
  port      Int
  isMain    Boolean @default(false)
  isSplit   Boolean @default(false)
  hasDrawer Boolean @default(false)
  archived  Boolean @default(false)

  @@index([id])
}

model Staff {
  id         Int      @id @default(autoincrement())
  name       String
  code       String
  phone      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  permission String   @default("{}")
  archived   Boolean  @default(false)
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  index     Int       @default(999)
  archived  Boolean   @default(false)
  Product   Product[]
}

model BuffetClass {
  id        Int      @id @default(autoincrement())
  mId       Int?
  name      String
  priceA    Float    @default(0)
  priceB    Float    @default(0)
  priceC    Float    @default(0)
  h_priceA  Float    @default(0)
  h_priceB  Float    @default(0)
  h_priceC  Float    @default(0)
  nameA     String   @default("A")
  nameB     String   @default("B")
  nameC     String   @default("C")
  stayTime  Int      @default(90)
  orderTime Int      @default(90)
  archived  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Product {
  id          Int       @id @default(autoincrement())
  mId         Int?
  imgId       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  name        String
  price       Float
  cost        Float     @default(0)
  isBuffet    Boolean   @default(false)
  buffetPrice String    @default("{}")
  printerIds  String    @default("[]")
  buffetIds   String    @default("[]")
  options     String    @default("[]") @db.Text
  index       Int       @default(999)
  hideKiosk   Boolean   @default(false)
  outOfStock  Boolean   @default(false)
  archived    Boolean   @default(false)

  @@index([categoryId])
}

model CashInOut {
  id        Int      @id @default(autoincrement())
  staffName String
  cashIn    Float
  cashOut   Float
  note      String   @default("") @db.Text
  createdAt DateTime @default(now())
}

model TableContainer {
  id        Int      @id @default(autoincrement())
  index     Int      @default(999)
  name      String
  archived  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tables    Table[]
}

model Table {
  id          Int             @id @default(autoincrement())
  name        String
  index       Int
  key         String          @default("")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  containerId Int?
  container   TableContainer? @relation(fields: [containerId], references: [id], onDelete: SetNull)
  archived    Boolean         @default(false)
}

// model DeviceToken {
//   id        Int      @id @default(autoincrement())
//   payload   String   @unique
//   device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
//   deviceId  Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([deviceId])
// }

model Shift {
  id        Int       @id @default(autoincrement())
  openAt    DateTime  @default(now())
  closedAt  DateTime?
  updatedAt DateTime  @updatedAt
}
